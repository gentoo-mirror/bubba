ogg/opus: Improve/fix seek.


diff -ru a/Changes b/Changes
--- a/Changes	2023-12-15 16:56:45.788470264 +0100
+++ b/Changes	2023-11-29 20:13:49.000000000 +0100
@@ -2,6 +2,9 @@
 
 Note: Bug numbers refer to bugs at http://bugs.slimdevices.com
 
+1.07	Unreleased build
+	- ogg/opus: Improve/fix seek.
+
 1.06	2022-11-10
 	- opus: Fix parsing large comment headers (such as large embedded images)
 
diff -ru a/MANIFEST b/MANIFEST
--- a/MANIFEST	2023-12-15 16:56:45.828471041 +0100
+++ b/MANIFEST	2023-11-29 20:13:49.000000000 +0100
@@ -267,5 +270,3 @@
 tools/bench.pl
 tools/leak.c
 tools/leak.pl
-META.yml                                 Module YAML meta-data (added by MakeMaker)
-META.json                                Module JSON meta-data (added by MakeMaker)
diff -ru a/include/ogg.h b/include/ogg.h
--- a/include/ogg.h	2015-08-18 06:41:26.000000000 +0200
+++ b/include/ogg.h	2023-11-29 20:13:49.000000000 +0100
@@ -14,6 +14,8 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  */
 
+#define OGG_HEADER_SIZE 28
+#define OGG_MAX_PAGE_SIZE 65307
 #define OGG_BLOCK_SIZE 4500
 
 int get_ogg_metadata(PerlIO *infile, char *file, HV *info, HV *tags);
diff -ru a/lib/Audio/Scan.pm b/lib/Audio/Scan.pm
--- a/lib/Audio/Scan.pm	2023-12-15 16:56:45.789470283 +0100
+++ b/lib/Audio/Scan.pm	2023-11-29 20:13:49.000000000 +0100
@@ -2,7 +2,7 @@
 
 use strict;
 
-our $VERSION = '1.06';
+our $VERSION = '1.07';
 
 require XSLoader;
 XSLoader::load('Audio::Scan', $VERSION);
diff -ru a/src/ogg.c b/src/ogg.c
--- a/src/ogg.c	2017-10-04 20:01:50.000000000 +0200
+++ b/src/ogg.c	2023-11-29 20:13:49.000000000 +0100
@@ -35,7 +35,7 @@
   off_t audio_size;          // total size of audio without tags
   off_t audio_offset = 0;    // offset to audio
 
-  unsigned char ogghdr[28];
+  unsigned char ogghdr[OGG_HEADER_SIZE];
   char header_type;
   int serialno;
   int final_serialno;
@@ -96,14 +96,14 @@
 
   while (1) {
     // Grab 28-byte Ogg header
-    if ( !_check_buf(infile, &ogg_buf, 28, OGG_BLOCK_SIZE) ) {
+    if ( !_check_buf(infile, &ogg_buf, OGG_HEADER_SIZE, OGG_BLOCK_SIZE) ) {
       err = -1;
       goto out;
     }
 
-    buffer_get(&ogg_buf, ogghdr, 28);
+    buffer_get(&ogg_buf, ogghdr, OGG_HEADER_SIZE);
 
-    audio_offset += 28;
+    audio_offset += OGG_HEADER_SIZE;
 
     // check that the first four bytes are 'OggS'
     if ( ogghdr[0] != 'O' || ogghdr[1] != 'g' || ogghdr[2] != 'g' || ogghdr[3] != 'S' ) {
@@ -149,7 +149,7 @@
       DEBUG_TRACE("Missing page(s) in Ogg file: %s\n", file);
     }
 
-    DEBUG_TRACE("OggS page %d / packet %d at %d\n", pagenum, packets, (int)(audio_offset - 28));
+    DEBUG_TRACE("OggS page %d / packet %d at %d\n", pagenum, packets, (int)(audio_offset - OGG_HEADER_SIZE));
     DEBUG_TRACE("  granule_pos: %llu\n", granule_pos);
 
     // If the granule_pos > 0, we have reached the end of headers and
@@ -266,7 +266,7 @@
   buffer_clear(&ogg_buf);
 
   // audio_offset is 28 less because we read the Ogg header
-  audio_offset -= 28;
+  audio_offset -= OGG_HEADER_SIZE;
 
   // from the first packet past the comments
   my_hv_store( info, "audio_offset", newSViv(audio_offset) );
@@ -523,7 +523,7 @@
   samplerate = SvIV( *(my_hv_fetch( info, "samplerate" )) );
 
   // Determine target sample we're looking for
-  target_sample = ((offset - 1) / 10) * (samplerate / 100);
+  target_sample = (uint64_t)offset * samplerate / 1000;
   DEBUG_TRACE("Looking for target sample %llu\n", target_sample);
 
   frame_offset = _ogg_binary_search_sample(infile, file, info, target_sample);
@@ -543,150 +543,119 @@
   unsigned char *bptr;
   unsigned int buf_size;
   int frame_offset = -1;
-  int prev_frame_offset = -1;
+  int best_frame_offset = -1;
   uint64_t granule_pos = 0;
-  uint64_t prev_granule_pos = 0;
-  uint32_t cur_serialno;
   off_t low;
   off_t high;
-  off_t mid;
-  int i;
 
   off_t audio_offset = SvIV( *(my_hv_fetch( info, "audio_offset" )) );
   off_t file_size    = SvIV( *(my_hv_fetch( info, "file_size" )) );
   uint32_t serialno  = SvIV( *(my_hv_fetch( info, "serial_number" )) );
 
-  // Binary search the entire file
+  // Define the binary search range
   low  = audio_offset;
-  high = file_size;
+  high = file_size - OGG_HEADER_SIZE;
 
-  // We need enough for at least 2 packets
-  buffer_init(&buf, OGG_BLOCK_SIZE * 2);
+  buffer_init(&buf, OGG_MAX_PAGE_SIZE + OGG_HEADER_SIZE);
 
-  while (low <= high) {
-    off_t packet_offset;
+  while (high > low) {
+    off_t mid;
+    off_t page_start_offset = -1;
+    uint32_t cur_serialno;
+    int i; // Used by macro CONVERT_INT32LE
 
-    mid = low + ((high - low) / 2);
+    if (high - low > OGG_HEADER_SIZE) {
+      mid = low + ((high - low) / 2);
+    } else {
+      mid = low; // Fast-forward search
+    }
 
-    DEBUG_TRACE("  Searching for sample %llu between %d and %d (mid %d)\n", target_sample, (int)low, (int)high, (int)mid);
+    DEBUG_TRACE("  Searching for sample %llu between %d and %d (mid %d)\n", target_sample, low, high, mid);
 
-    if (mid > file_size - 28) {
+    if (mid > file_size - OGG_HEADER_SIZE) {
       DEBUG_TRACE("  Reached end of file, aborting\n");
       frame_offset = -1;
       goto out;
     }
 
-    if ( (PerlIO_seek(infile, mid, SEEK_SET)) == -1 ) {
+    if (PerlIO_seek(infile, mid, SEEK_SET) == -1) {
       frame_offset = -1;
       goto out;
     }
 
-    if ( !_check_buf(infile, &buf, 28, OGG_BLOCK_SIZE * 2) ) {
+    buffer_clear(&buf);
+
+    // Worst case is:
+    // ....OggS...<OGG_MAX_PAGE_SIZE>...OggS
+    //      ^-mid                        ^-high
+    //
+    // To handle this, read OGG_HEADER_SIZE bytes extra after 'high'
+    // so that we find the header that starts just before 'high'.
+    if (!_check_buf(infile, &buf, OGG_HEADER_SIZE,
+		    MIN(OGG_MAX_PAGE_SIZE, high - mid) + OGG_HEADER_SIZE)) {
       frame_offset = -1;
       goto out;
     }
 
-    bptr = buffer_ptr(&buf);
-    buf_size = buffer_len(&buf);
-
-    // Find all packets within this buffer, we need at least 2 packets
-    // to figure out what samples we have
-    while (buf_size >= 4) {
-      // Save info from previous packet
-      prev_frame_offset = frame_offset;
-      prev_granule_pos  = granule_pos;
-
-      while (
-        buf_size >= 4
-        &&
-        (bptr[0] != 'O' || bptr[1] != 'g' || bptr[2] != 'g' || bptr[3] != 'S')
-      ) {
-        bptr++;
-        buf_size--;
-      }
-
+    for (bptr = buffer_ptr(&buf), buf_size = buffer_len(&buf); ; ++bptr, --buf_size) {
       if (buf_size < 4) {
-        // No more packets found in buffer
-        break;
-      }
-
-      // Remember how far into the buffer this packet is
-      packet_offset = buffer_len(&buf) - buf_size;
-
-      frame_offset = mid + packet_offset;
-
-      // Make sure we have at least the Ogg header
-      if ( !_check_buf(infile, &buf, 28, 28) ) {
-        frame_offset = -1;
-        goto out;
+	// no page start found!?
+	break;
       }
 
-      // Read granule_pos for this packet
-      bptr = buffer_ptr(&buf);
-      bptr += packet_offset + 6;
-      granule_pos = (uint64_t)CONVERT_INT32LE(bptr);
-      bptr += 4;
-      granule_pos |= (uint64_t)CONVERT_INT32LE(bptr) << 32;
-      bptr += 4;
-      buf_size -= 14;
-
-      // Also read serial number, if this ever changes within a file it is a chained
-      // file and we can't seek
-      cur_serialno = CONVERT_INT32LE(bptr);
-
-      if (serialno != cur_serialno) {
-        DEBUG_TRACE("  serial number changed to %x, aborting seek\n", cur_serialno);
-        frame_offset = -1;
-        goto out;
+      if (bptr[0] != 'O' || bptr[1] != 'g' || bptr[2] != 'g' || bptr[3] != 'S') {
+	continue;
       }
 
-      DEBUG_TRACE("  frame offset: %d, prev_frame_offset: %d, granule_pos: %llu, prev_granule_pos %llu\n",
-        frame_offset, prev_frame_offset, granule_pos, prev_granule_pos
-      );
+      page_start_offset = buffer_len(&buf) - buf_size;
+      frame_offset = mid + page_start_offset;
+      break;
+    }
 
-      // Break out after reading 2 packets
-      if (granule_pos && prev_granule_pos) {
-        break;
-      }
+    if (page_start_offset < 0) {
+      DEBUG_TRACE("  Nothing found in upper half, searching lower\n");
+      high = mid;
+      continue;
     }
 
-    // Now, we know the first (prev_granule_pos + 1) and last (granule_pos) samples
-    // in the packet starting at frame_offset
+    DEBUG_TRACE("  checking frame at %d\n", frame_offset);
 
-    if ((prev_granule_pos + 1) <= target_sample && granule_pos >= target_sample) {
-      // found frame
-      DEBUG_TRACE("  found frame at %d\n", frame_offset);
+    // Read granule_pos for this packet
+    bptr = buffer_ptr(&buf);
+    bptr += page_start_offset + 6;
+    granule_pos = (uint64_t)CONVERT_INT32LE(bptr);
+    bptr += 4;
+    granule_pos |= (uint64_t)CONVERT_INT32LE(bptr) << 32;
+    bptr += 4;
+
+    // Also read serial number, if this ever changes within a file it is a chained
+    // file and we can't seek
+    cur_serialno = CONVERT_INT32LE(bptr);
+    if (serialno != cur_serialno) {
+      DEBUG_TRACE("  serial number changed to %x, aborting seek\n", cur_serialno);
+      frame_offset = -1;
       goto out;
     }
 
-    if (target_sample < (prev_granule_pos + 1)) {
-      // Special case when very first frame has the sample
-      if (prev_frame_offset == audio_offset) {
-        DEBUG_TRACE("  first frame has target sample\n");
-        frame_offset = prev_frame_offset;
-        break;
-      }
-
-      high = mid - 1;
-      DEBUG_TRACE("  high = %d\n", (int)high);
+    if (granule_pos > target_sample) {
+      best_frame_offset = frame_offset;
+      DEBUG_TRACE("  searching lower\n");
+      high = mid;
+    }
+    else if (granule_pos < target_sample) {
+      DEBUG_TRACE("  searching higher\n");
+      low = frame_offset + OGG_HEADER_SIZE;
     }
     else {
-      low = mid + 1;
-      DEBUG_TRACE("  low = %d\n", (int)low);
+      DEBUG_TRACE("  found frame at %d\n", frame_offset);
+      best_frame_offset = frame_offset;
+      break;
     }
-
-    // XXX this can be pretty inefficient in some cases
-
-    // Reset and binary search again
-    buffer_clear(&buf);
-
-    frame_offset = -1;
-    granule_pos = 0;
   }
 
+  frame_offset = best_frame_offset;
+
 out:
   buffer_free(&buf);
-
   return frame_offset;
 }
-
diff -ru a/src/opus.c b/src/opus.c
--- a/src/opus.c	2023-12-15 16:56:45.789470283 +0100
+++ b/src/opus.c	2023-11-29 20:13:49.000000000 +0100
@@ -150,8 +150,8 @@
       page = -1;
       DEBUG_TRACE("Missing page(s) in Ogg file: %s\n", file);
     }
-    
-    DEBUG_TRACE("OggS page %d / packet %d at %d\n", pagenum, packets, (int)(audio_offset - 28));
+
+    DEBUG_TRACE("OggS page %d / packet %d at %d\n", pagenum, packets, (int)(audio_offset - OGG_HEADER_SIZE));
     DEBUG_TRACE("  granule_pos: %llu\n", granule_pos);
     
     // Number of page segments
@@ -245,8 +245,8 @@
       	preskip = CONVERT_INT16LE((opushdr+2));
       	my_hv_store( info, "preskip", newSViv(preskip) );
 
-      	my_hv_store( info, "samplerate", newSViv(48000) );
       	samplerate = 48000; // Opus only supports 48k
+      	my_hv_store( info, "samplerate", newSViv(samplerate) );
 
       	input_samplerate = CONVERT_INT32LE((opushdr+4));
       	my_hv_store( info, "input_samplerate", newSViv(input_samplerate) );
@@ -261,8 +261,8 @@
   }
   
   // audio_offset is 28 less because we read the Ogg header
-  audio_offset -= 28;
-  
+  audio_offset -= OGG_HEADER_SIZE;
+
   // from the first packet past the comments
   my_hv_store( info, "audio_offset", newSViv(audio_offset) );
   
@@ -353,28 +353,34 @@
 opus_find_frame(PerlIO *infile, char *file, int offset)
 {
   int frame_offset = -1;
+  uint16_t preskip;
   uint32_t samplerate;
   uint32_t song_length_ms;
   uint64_t target_sample;
-  
-  // We need to read all metadata first to get some data we need to calculate
   HV *info = newHV();
   HV *tags = newHV();
+
+  if (offset < 0) {
+    return -1;
+  }
+
+  // We need to read all metadata first to get some data we need to calculate
   if ( _opus_parse(infile, file, info, tags, 1) != 0 ) {
     goto out;
   }
-  
-  song_length_ms = SvIV( *(my_hv_fetch( info, "song_length_ms" )) );
+
+  song_length_ms = SvUV( *(my_hv_fetch( info, "song_length_ms" )) );
   if (offset >= song_length_ms) {
     goto out;
   }
-  
-  samplerate = SvIV( *(my_hv_fetch( info, "samplerate" )) );
-  
+
   // Determine target sample we're looking for
-  target_sample = ((offset - 1) / 10) * (samplerate / 100);
+  samplerate = SvIV( *(my_hv_fetch( info, "samplerate" )) );
+  preskip = SvIV( *(my_hv_fetch( info, "preskip" )) );
+  target_sample = (uint64_t)offset * samplerate / 1000;
+  target_sample += preskip;
+
   DEBUG_TRACE("Looking for target sample %llu\n", target_sample);
-  
   frame_offset = _ogg_binary_search_sample(infile, file, info, target_sample);
 
 out:  
diff -ru a/t/opus.t b/t/opus.t
--- a/t/opus.t	2023-12-15 16:56:45.789470283 +0100
+++ b/t/opus.t	2023-11-29 20:13:49.000000000 +0100
@@ -2,7 +2,7 @@
 
 use File::Spec::Functions;
 use FindBin ();
-use Test::More tests => 88;
+use Test::More tests => 112;
 
 use Audio::Scan;
 
@@ -70,8 +70,38 @@
     is($tags->{ALLPICTURES}[0]{mime_type}, 'image/png', 'Image type ok');
 }
 
-## A few of the official Opus test files from https://people.xiph.org/~greg/opus_testvectors/
+{
+    my $offset = Audio::Scan->find_frame( _f('3min_noise.opus'), 0 );
+
+    is( $offset, 841, 'Find frame in first page ok' );
+}
+
+{
+    for ( my $ms = 68000; $ms <= 70000; $ms += 100 ) {
+        my $offset = Audio::Scan->find_frame( _f('3min_noise.opus'), $ms );
+        if ( $ms < 69000 ) {
+            is( $offset, 731993, "Wrong offset at $ms ms" );
+        } elsif ($ms < 70000 ) {
+            is( $offset, 742756, "Wrong offset at $ms ms" );
+        } else {
+            is( $offset, 753463, "Wrong offset at $ms ms" );
+        }
+    }
+}
+
+{
+    my $offset = Audio::Scan->find_frame( _f('3min_noise.opus'), 179999 );
+
+    is( $offset, 1936144, 'Find frame in last page ok' );
+}
+
+{
+    my $offset = Audio::Scan->find_frame( _f('3min_noise.opus'), 180000 );
+
+    is( $offset, -1, 'Find frame outside of file not ok' );
+}
 
+## A few of the official Opus test files from https://people.xiph.org/~greg/opus_testvectors/
 {
   my $s = Audio::Scan->scan( _f('failure-end_gp_before_last_packet1.opus'), { md5_size => 4096 } );
 

